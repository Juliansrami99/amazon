}
else if(caso_maximo==4 || caso_maximo==8){
if (caso_maximo==4){
coordenadas=c(-tabla[caso_maximo,i],0)
}
else if (caso_maximo==8){
coordenadas=c(tabla[caso_maximo,i],0)
}
}
fila=c(tabla[,i],coordenadas)
colu=as.data.frame(fila)
tabla_fin=cbind(tabla_fin,colu)
}
total=data.frame(t(tabla_fin))
total=total[-1,]
colnames(total)<-c("rockstar","rockstar-icarus","icarus","icarus-zombie","zombie",
"zombie-gem","gem","gem-rockstar","ejex","ejey")
rownames(total)<-colnames(tabla)
total=columna_estado(total)
return(total)
}
#Historico kafka
historico_kafka<-function(accion){
### vector de acciones ###
vec<-c(accion)
### Descarga de datos ###
tablas_original<-todos_numero_fecha(vec,1,"2000-01-01","2020-01-01")
### Creamos la lista de tablas con scale ###
lista_accion<-normal_indicador(tablas_original)
### tabla con maximos ###
pru=prueba_maximos(tablas_original)
### tablas reversion a la media ###
listas_tab<-lista_tabla_tab(lista_accion)
print("DESCARGA DE DATOS HECHA HASTA ACA")
print(Sys.time())
### Ejecucion kafka ###
tabla_definitica=data.frame("DATES"=as.Date(as.character()),"STATE"=as.character())
for (j in 832:nrow(tablas_original[[1]])){
lista_resultados=list()
for (i in 1:length(tablas_original)){
fecha_inicio=as.Date(as.numeric(tablas_original[[1]]$DATES[j-831]))
fecha_final=as.Date(as.numeric(tablas_original[[1]]$DATES[j]))
b=clasificacion_kafka(listas_tab[[i]],pru[[i]],fecha_inicio,fecha_final)
lista_resultados[[i]]<-b
}
final=crear_tabla_resumen(lista_resultados,vec)
cua=cuadrantes(final)
dato=data.frame("DATES"=fecha_final,"STATE"=cua$estados[1])
tabla_definitica=rbind(tabla_definitica,dato)
}
print(Sys.time())
return(tabla_definitica)
}
graficar_historico<-function(tabla){
fin_fin=tabla %>% mutate("CASE"=ifelse(STATE=="rockstar",1,
ifelse(STATE=="rockstar-icarus",2,
ifelse(STATE=="icarus",3,
ifelse(STATE=="icarus-zombie",4,
ifelse(STATE=="zombie",5,
ifelse(STATE=="zombie-gem",6,
ifelse(STATE=="gem",7,
ifelse(STATE=="gem-rockstar",8,0)))))))))
return(fin_fin)
}
definitivo_historico_kafka<-function(lista_acciones){
lista_resultados=list()
for(i in 1:length(lista_acciones)){
# Tabla historica de cada accion
tabla=historico_kafka(lista_acciones[i])
lista_resultados[[i]]<-tabla
}
return(lista_resultados)
}
historico_kafka_todos_parametros<-function(tablas_original,lista_accion,pru,listas_tab,vec){
print("DESCARGA DE DATOS HECHA HASTA ACA")
print(Sys.time())
### Ejecucion kafka ###
lista_total=list()
for (h in 1:length(tablas_original)){
print(h)
tabla_definitica=data.frame("DATES"=as.Date(as.character()),"STATE"=as.character())
for (j in 832:nrow(tablas_original[[h]])){
lista_resultados=list()
fecha_inicio=as.Date(as.numeric(tablas_original[[h]]$DATES[j-831]))
fecha_final=as.Date(as.numeric(tablas_original[[h]]$DATES[j]))
b=clasificacion_kafka(listas_tab[[h]],pru[[h]],fecha_inicio,fecha_final)
lista_resultados[[h]]<-b
final=crear_tabla_resumen(lista_resultados,vec[h])
cua=cuadrantes(final)
dato=data.frame("DATES"=fecha_final,"STATE"=cua$estados[1])
tabla_definitica=rbind(tabla_definitica,dato)
}
lista_total[[h]]<-tabla_definitica
print(Sys.time())
}
return(lista_total)
}
barras_historico<-function(tabla,nume){
colu=rep(nume,nrow(tabla))
tabla=tabla %>% mutate(COUNT=colu)
return(tabla)
}
# #historico_kafka_todos_parametros<-function(tablas_original,lista_accion,pru,listas_tab,hh){
#   print("DESCARGA DE DATOS HECHA HASTA ACA")
#   print(Sys.time())
#   ### Ejecucion kafka ###
#   ultima=list()
#   for (i in 1:length(tablas_original)){
#     tabla_definitica=data.frame("DATES"=as.Date(as.character()),"STATE"=as.character())
#     lista_resultados=list()
#     cont=1
#     for (j in 832:nrow(tablas_original[[i]])){
#         fecha_inicio=as.Date(as.numeric(tablas_original[[i]]$DATES[(j-831)]))
#         fecha_final=as.Date(as.numeric(tablas_original[[i]]$DATES[j]))
#         b=clasificacion_kafka(listas_tab[[i]],pru[[i]],fecha_inicio,fecha_final)
#         lista_resultados[[cont]]<-b
#         cont=cont+1
#     }
#     print("final")
#     final=crear_tabla_resumen(lista_resultados,hh[i])
#     print("cuadrantes making")
#     cua=cuadrantes(final)
#     dato=data.frame("DATES"=fecha_final,"STATE"=cua$estados[1])
#     tabla_definitica=rbind(tabla_definitica,dato)
#     ultima[[i]]<-tabla_definitica
#     print("termine primero")
#   }
#   print(Sys.time())
#   return(ultima)
# }
##########################################
# Clusters
##########################################
dendograma_cut<-function(tablas_original,vec){
menor=nrow(tablas_original[[1]])
indice=1
for (i in 1:length(tablas_original)) {
if (nrow(tablas_original[[i]])<menor){
menor=nrow(tablas_original[[i]])
indice=i
}
}
listas_final=list()
dias_minimo=tablas_original[[indice]]$DATES[1]
for (j in 1:length(tablas_original)) {
tabla_temp=tablas_original[[j]] %>% filter(DATES>=dias_minimo)
tabla_temp=as.data.frame(tabla_temp)
listas_final[[j]]<-tabla_temp
}
tabl=data.frame("seq"=seq(1,nrow(listas_final[[1]])))
for (a in 1:length(listas_final)){
tabl=cbind(tabl,listas_final[[a]]$DRAWDOWNS)
}
tabl=tabl[,-1]
colnames(tabl)<-vec
tabl_tran=t(tabl)
tabl_tran=as.data.frame(tabl_tran)
# distancia euclidiana
d<-dist(as.matrix(tabl_tran),method = "euclidean")
# numero de clusters
# gap_stat <- clusGap(tabl_tran, FUN = hcut, nstart = 25, K.max = 10, B = 50)
# a<-fviz_gap_stat(gap_stat)
clus=8
fit<-hclust(d)
sub_grp <- cutree(fit, k = clus)
return(list(fit,sub_grp,clus,tabl_tran))
}
tablas_original<-todos_numero(vec,1)
lista_accion<-normal_indicador(tablas_original)
### Creamos la lista de tablas con scale ###
lista_accion<-normal_indicador(tablas_original)
pru=prueba_maximos(tablas_original)
listas_tab<-lista_tabla_tab(lista_accion)
lista_resultados=list()
for (i in 1:length(tablas_original)){
print(i)
b=clasificacion_kafka(listas_tab[[i]],pru[[i]],"2018-05-25","2020-05-25")
lista_resultados[[i]]<-b
}
final=crear_tabla_resumen(lista_resultados,vec)
cua=cuadrantes(final)
View(cua)
library(data.table)
mydat <- fread('https://query1.finance.yahoo.com/v7/finance/download/%5ENYXBT?period1=1566759765&period2=1598382165&interval=1d&events=history')
mydat
actualizacion_bases<-function(){
res=resultado_portafolio()
# revisar como solo copiar la ultima fila
write.xlsx(result[[1]],"data/indice.xlsx",row.names = F)
write.xlsx(result[[2]],"data/spy.xlsx",row.names = F)
mydat <- fread('https://query1.finance.yahoo.com/v7/finance/download/%5ENYXBT?period1=1566759765&period2=1598382165&interval=1d&events=history')
bitcoin=read_xlsx("data/NYSE Bitcoin.xlsx")
temp=data.frame("Close"=mydat$Close[1],"Dates"=mydat$Date[1])
bitcoin=rbind(bitcoin,temp)
colnames(bitcoin)=c("Close","Dates")
write.xlsx(bitcoin,"data/NYSE Bitcoin.xlsx")
}
shiny::runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
library(shiny)
library(plotly)
library(DT)
library(xlsx)
library(shinyjs)
library(readxl)
library(dygraphs)
library(tidyr)
library(TTR)
library(shinydashboard)
library(matrixStats)
library(tidyverse)
library(psych)
library(ggpubr)
library(ggplot2)
library(xts)
library(sqldf)
library(fitdistrplus)
library(shiny)
library(shinydashboard)
library(timeSeries)
library(PerformanceAnalytics)
library(FRAPO)
library(fPortfolio)
library(quantmod)
library(tidyverse)
library(dplyr)
library(fredr)
library(xlsx)
library(plotly)
library(readxl)
library(writexl)
require(reshape2)
library(e1071)
library(poweRlaw)
library(data.table)
library(tseries)
library(mltools)
library(gganimate)
library(cluster)
library(factoextra)
library(NbClust)
library(crosstalk)
library(DT)
library(purrr)
library(data.table)
library(lubridate)
library(dplyr)
library(scales)
library(colortools)
library(RColorBrewer)
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
shiny::runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
shiny::runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
library(fitdistrplus)
library(shiny)
library(shinydashboard)
library(timeSeries)
library(PerformanceAnalytics)
library(FRAPO)
library(fPortfolio)
library(quantmod)
library(tidyverse)
library(dplyr)
library(fredr)
library(xlsx)
library(plotly)
library(readxl)
library(writexl)
require(reshape2)
library(e1071)
library(poweRlaw)
library(data.table)
library(tseries)
library(mltools)
library(gganimate)
library(cluster)
library(factoextra)
library(NbClust)
library(crosstalk)
library(DT)
library(purrr)
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
shiny::runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
shiny::runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
shiny::runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
runApp('C:/Users/Julian/Desktop/Macrowise/dashboards/portfolio_dashboard')
library(aws.s3)
Sys.setenv(
"AWS_ACCESS_KEY_ID" = "AKIAXJ2M26ZHAC52NNPE",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-1"
)
# todos los csv path
tmp = get_bucket(bucket = "macrowisecolombia", prefix="bases/regimen_change/ewh")
list_csv = data.frame(tmp)
csv_paths = list_csv$Key[grep(".csv", list_csv$Key)]
lista_tabla<-list()
j=1
for (i in csv_paths){
a=s3read_using(FUN = read.csv, object = paste0("s3://macrowisecolombia/",i))
j=j+1
lista_tabla[[j]]<-a
}
View(lista_tabla[[1]])
View(lista_tabla[[2]])
csv_paths
library("datasets")
tmp <- tempfile()
tmp
on.exit(unlink(tmp))
utils::write.csv(mtcars, file = tmp)
read.csv("mtcars.csv")
csvpahts
csvpaths
csv_paths
length(csv_paths)
length(lista_tabla)
tabla=read_xlsx("ewh.xlsx")
library(timeSeries)
library(PerformanceAnalytics)
library(FRAPO)
library(quantmod)
library(dplyr)
library(DBI)
library(RMySQL)
library(readxl)
library(tidyverse)
#library(fredr)
#library(xlsx)
#library(plotly)
#library(readxl)
#library(writexl)
require(reshape2)
#library(e1071)
#library(poweRlaw)
library(data.table)
#library(tseries)
#library(mltools)
#library(gganimate)
#library(cluster)
#library(factoextra)
#library(NbClust)
#library(crosstalk)
library(DT)
#library(plyr)
#library(dplyr)
#library(fredr)
tabla=read_xlsx("ewh.xlsx")
setwd("~/GitHub/amazon")
tabla=read_xlsx("ewh.xlsx")
vec<-as.vector(tabla$TICKERS)
vec
length(vec)
tablas_original<-todos_numero(vec[1],1)
lista_accion<-normal_indicador(tablas_original)
setwd("~/GitHub/amazon")
vec[1]
View(lista_accion[[1]])
View(lista_tabla[[2]])
tabla$row_names=rownames(lista_accion[[1]])
tabla=lista_accion[[1]]
tabla$row_names=rownames(lista_accion[[1]])
tabla %>% select(row_names,everything())
View(tabla)
tabla=tabla %>% select(row_names,everything())
View(tabla)
csv_paths
vec1
vec(1)
vec[1]
write.csv(tabla,"1299_HK_ewh.csv",row.names = F)
ta=read.csv("1299_HK_ewh.csv")
View(ta)
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh",show_progress = T)
a=s3read_using(FUN = read.csv, object = "s3://macrowisecolombia/bases/regimen_change/ewh/1299_HK_ewh.csv")
View(a)
View(ta)
tmp="~/GitHub/amazon"
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh/",show_progress = T)
tmp="~/GitHub/amazon"
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh/",show_progress = T)
tmp="~/GitHub/amazon/1299_HK_ewh.csv"
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh/",show_progress = T)
tmp="~/GitHub/amazon/1299_HK_ewh.csv"
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh/",show_progress = T,acl=c("public-read"))
Sys.setenv(
"AWS_ACCESS_KEY_ID" = "AKIAXJ2M26ZHAC52NNPE",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-1"
)
tmp="~/GitHub/amazon/1299_HK_ewh.csv"
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh/",show_progress = T,acl=c("public-read"))
zz <- rawConnection(raw(0), "r+")
zz
tmp="~/GitHub/amazon/1299_HK_ewh.csv"
put_object(tmp,object = "1299_HK_ewh.csv",bucket = "macrowisecolombia",folder="bases/regimen_change/ewh/",show_progress = T,
acl="public-read")
library(aws.s3)
Sys.setenv(
"AWS_ACCESS_KEY_ID" = "AKIAXJ2M26ZHAC52NNPE",
"AWS_SECRET_ACCESS_KEY" = "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",
"AWS_DEFAULT_REGION" = "us-east-1"
)
a=s3read_using(FUN = read.csv, object = "s3://macrowisecolombia/bases/regimen_change/ewh/1299_HK_ewh.csv")
View(a)
a
tablas_original<-todos_numero(vec[2],1)
lista_accion<-normal_indicador(tablas_original)
tabla=lista_accion[[2]]
tabla$row_names=rownames(lista_accion[[2]])
tabla=tabla %>% select(row_names,everything())
tabla=lista_accion[[1]]
tabla$row_names=rownames(lista_accion[[1]])
tabla=tabla %>% select(row_names,everything())
vec[2]
write.csv(tabla,"ewh/0388_HK_ewh.csv",row.names = F)
tablas_original<-todos_numero(vec,1)
lista_accion<-normal_indicador(tablas_original)
a="julian"
gsub("n",".",a)
length(lista_accion)
length(vec)
csv_paths
vec_nuevo=c()
for (i in 1:length(lista_accion)){
pal=gsub(".","_",vec[i])
palab=paste0(pal,paste0("_ewh",".csv"))
vec_nuevo=c(vec_nuevo,palab)
}
vec_nuevo
vec[1]
a=gsub(".","_",vec[1]
)
a
a=gsub("1","_",vec[1])
a
a=gsub(".","_",vec[1])
a
a=gsub('.',"_",vec[1])
a
a=gsub('\\.',"_",vec[1])
a
vec_nuevo=c()
for (i in 1:length(lista_accion)){
pal=gsub("\\.","_",vec[i])
palab=paste0(pal,paste0("_ewh",".csv"))
vec_nuevo=c(vec_nuevo,palab)
}
vec_nuevo
for (i in 1:length(vec_nuevo)){
tabla=lista_accion[[i]]
tabla$row_names=rownames(lista_accion[[i]])
tabla=tabla %>% select(row_names,everything())
write.csv(tabla,paste0("ewh/",vec_nuevo[i]),row.names = F)
}
tmp = get_bucket(bucket = "macrowisecolombia", prefix="bases/regimen_change/ewh")
list_csv = data.frame(tmp)
csv_paths = list_csv$Key[grep(".csv", list_csv$Key)]
lista_tabla<-list()
j=1
for (i in csv_paths){
a=s3read_using(FUN = read.csv, object = paste0("s3://macrowisecolombia/",i))
j=j+1
lista_tabla[[j]]<-a
}
View(lista_tabla[[2]])
View(lista_tabla[[3]])
tabla=read_xlsx("ewj.xlsx")
vec<-as.vector(tabla$TICKERS)
vec
tablas_original<-todos_numero(vec,1)
lista_accion<-normal_indicador(tablas_original)
vec_nuevo=c()
for (i in 1:length(lista_accion)){
pal=gsub("\\.","_",vec[i])
palab=paste0(pal,paste0("_ewj",".csv"))
vec_nuevo=c(vec_nuevo,palab)
}
vec_nuevo
for (i in 1:length(vec_nuevo)){
tabla=lista_accion[[i]]
tabla$row_names=rownames(lista_accion[[i]])
tabla=tabla %>% select(row_names,everything())
write.csv(tabla,paste0("ewj/",vec_nuevo[i]),row.names = F)
}
tabla=read_xlsx("spy.xlsx")
vec<-as.vector(tabla$TICKERS)
vec
tabla=read_xlsx("spy.xlsx")
vec<-as.vector(tabla$TICKERS)
tablas_original<-todos_numero(vec,1)
lista_accion<-normal_indicador(tablas_original)
vec_nuevo=c()
for (i in 1:length(lista_accion)){
palab=paste0(vec[i],paste0("_spy",".csv"))
vec_nuevo=c(vec_nuevo,palab)
}
vec_nuevo
for (i in 1:length(vec_nuevo)){
tabla=lista_accion[[i]]
tabla$row_names=rownames(lista_accion[[i]])
tabla=tabla %>% select(row_names,everything())
write.csv(tabla,paste0("spy/",vec_nuevo[i]),row.names = F)
}
