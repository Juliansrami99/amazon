}
}
dias_vector[i]<-dias
}
}
}
}
for(i in 1:nrow(tabla)){
if(dias_vector[i]==0){
dias_vector[i]=NA
}
}
tabla=cbind(tabla,dias_vector)
tabla=as.data.frame(tabla)
colnames(tabla)<-c(nombres,"DIAS")
return(tabla)
}
reversion_media_scale<-function(tabla){
media=mean(tabla$SCALE,na.rm = T)
rev_dias=vector(,nrow(tabla))
logicos=vector(,nrow(tabla))
for (i in 1:nrow(tabla)){
if (logicos[i]==F){
if (tabla$SCALE[i]>media){
logicos[i]=T
j=i+1
cont=1
if (j<=nrow(tabla)){
while(tabla$SCALE[j]>media & j<=nrow(tabla)){
cont=cont+1
j=j+1
}
rev_dias[i]<-cont
if(j<=nrow(tabla)){
nuev=cont
for (h in (i+1):j){
nuev=nuev-1
rev_dias[h]=nuev
logicos[h]=T
}
}
}
}
else{
logicos[i]=T
j=i+1
cont=1
if (j<=nrow(tabla)){
while(tabla$SCALE[j]<=media & j<=nrow(tabla)){
cont=cont+1
j=j+1
}
rev_dias[i]<-cont
if(j<=nrow(tabla)){
nuev=cont
for (h in (i+1):j){
nuev=nuev-1
rev_dias[h]=nuev
logicos[h]=T
}
}
}
}
}
}
return(rev_dias)
}
##### todos: Funcion mas importante #####
todos<-function(vec){
total=list()
for(j in 1:length(vec)){
tryCatch({a=getSymbols(vec[j],src="yahoo",from="1927-12-30",auto.assign=FALSE,env = NULL)
},error=function(e)NA)
total[[j]]<-a
}
precios=list()
for (i in 1:length(total)){
b=convertir(total[[i]])
precios[[i]]<-b
}
drawdowns=list()
for (u in 1:length(precios)){
precios[[u]]=na.omit(precios[[u]])
c=drawdowns_j(precios[[u]])
drawdowns[[u]]<-c
}
defini=list()
for (u in 1:length(drawdowns)){
drawdowns[[u]]=na.omit(drawdowns[[u]])
c=dup2(drawdowns[[u]])
ultima_actua=medida(c)
defini[[u]]<-ultima_actua
}
return(defini)
}
todos_numero<-function(vec,numero){
total=list()
for(j in 1:length(vec)){
tryCatch({a=getSymbols(vec[j],src="yahoo",from="1927-12-30",auto.assign=FALSE,env = NULL)
},error=function(e)NA)
total[[j]]<-a
}
precios=list()
for (i in 1:length(total)){
b=convertir(total[[i]])
precios[[i]]<-b
}
drawdowns=list()
for (u in 1:length(precios)){
precios[[u]]=na.omit(precios[[u]])
c=drawdowns_j(precios[[u]])
drawdowns[[u]]<-c
}
defini=list()
for (u in 1:length(drawdowns)){
drawdowns[[u]]=na.omit(drawdowns[[u]])
c=dup_con_numero(drawdowns[[u]],numero)
ultima_actua=medida(c)
defini[[u]]<-ultima_actua
}
return(defini)
}
View(reversion_media_scale)
library(readxl)
tabla=read_xlsx("./spy/tickers.xlsx")
tabla=read_xlsx("../spy/tickers.xlsx")
tabla=read_xlsx(".../spy/tickers.xlsx")
tabla=read_xlsx("./spy/tickers.xlsx")
setwd("~/GitHub/amazon")
tabla=read_xlsx("./spy/tickers.xlsx")
vec<-as.vector(tabla$TICKERS)
vec
tablas_original<-todos_numero(vec,1)
lista_accion<-normal_indicador(tablas_original)
tabla_tab<-function(tabla){
#tab=reversion_media_scale(tabla)
tab=tabla$SCALE
hola=cbind(tabla$SCALE,tab)
hola=cbind(hola,tabla$DATES)
hola=as.data.frame(hola)
hola$V3=as.Date(hola$V3)
colnames(hola)<-c("SCALE","REVERSION","DATES")
return(hola)
}
## Creacion lista de tablas tab
lista_tabla_tab<-function(lista){
lista_final=list()
for (j in 1:length(lista)){
b=tabla_tab(lista[[j]])
lista_final[[j]]<-b
}
return(lista_final)
}
## Para graficar tabla tab
graficar_tabla_tab<-function(tabla,media_rev){
media=mean(tabla$REVERSION)
w=lm(tabla$SCALE~tabla$DATES,tabla)
x11()
par(mfrow=c(1,2))
plot(tabla$DATES,tabla$SCALE)
abline(w,col="red")
plot(tabla$REVERSION,tabla$SCALE)
abline(v=media_rev,col="blue")
abline(v=media,col="green")
legend("topleft",legend = c("media muestra","media total"),col=c("green","blue"),bty='n',lty=2)
print(w$coefficients)
print(w$coefficients[2]>0.001 & w$coefficients[2]<0.001)
}
graficas_maximos<-function(tabla){
numero_maximos=nrow(tabla %>% filter(!is.na(PRECIO_MAX)))
mostrar=as.character(numero_maximos)
x11()
plot(tabla$DATES,tabla$PRECIO_MAX,pch=20,cex=1.5,col="red",ylab="",xlab="Dates",yaxt="n",
ylim=c(min(tabla$PRECIO),max(tabla$PRECIO)))
lines(tabla$DATES,tabla$PRECIO,type="l")
grid()
legend("topleft",legend = c(paste("numero maximos ",mostrar)))
}
analisis_maximos_datos<-function(tabla){
d=split(tabla, format(as.Date(tabla$DATES), "%Y"))
nombres=names(d)
tama=vector(,length(d))
for (i in 1:length(d)){
largo=nrow(d[[i]])
tama[i]=largo
}
nombres=as.data.frame(nombres)
tama=as.data.frame(tama)
defini=data.frame(nombres,tama)
return(defini)
}
clasificacion_maximos<-function(tabla,tabla_maximos,fecha_inicio,fecha_final){
# filtro la tabla historica del stock por fecha inicial y fecha final
#tabla_temporal=tabla %>% filter(DATES>=fecha_inicio & DATES<=fecha_final)
tabla_temporal_maximos=tabla_maximos %>% filter(DATES>=fecha_inicio & DATES<=fecha_final)
# Crear una nueva variable que solo tenga el ao de los dias
tabla_temporal_maximos=tabla_temporal_maximos %>% mutate("YEAR"=as.numeric(format(DATES,'%Y')))
casos=vector(,8)
###### Paso uno: cuantos maximos hay ####
num_maximos_historicos=tabla_maximos %>% filter(!is.na(PRECIO_MAX))
num_maximos=tabla_temporal_maximos %>% filter(!is.na(PRECIO_MAX))
n_maxi=nrow(num_maximos)
n_maxi_historico=nrow(num_maximos_historicos)
##########################################
if (n_maxi_historico==0){
dato_an=0
dato_an2=0
}
else{
a=analisis_maximos_datos(num_maximos_historicos)
if(length(a$tama)==1){
dato_an=4
dato_an2=4
}
else{
dato_an=mean(a$tama,na.rm=T)+sd(a$tama,na.rm=T)
dato_an2=mean(a$tama,na.rm=T)+sd(a$tama,na.rm=T)/2
}
}
# Half year of the sample
year_m=as.Date((as.numeric(as.Date(fecha_final))+as.numeric(as.Date(fecha_inicio)))/2)
# Tabla de datos debajo de dicha fecha
if (tabla_maximos$DATES[1]<fecha_inicio){
tabla_inicial=tabla_temporal_maximos
tabla_final=tabla_temporal_maximos
}
else{
tabla_inicial=tabla_temporal_maximos %>% filter(DATES<year_m)
# Tabla de datos despues de esa fecha
tabla_final=tabla_temporal_maximos %>% filter(DATES>=year_m)
# Numero de maximos de la tabla inicial
}
num_maximos_inicial=tabla_inicial %>% filter(!is.na(PRECIO_MAX))
n_maxi_inicial=nrow(num_maximos_inicial)
# Maximos segunda tabla
num_maximos_final=tabla_final %>% filter(!is.na(PRECIO_MAX))
n_maxi_final=nrow(num_maximos_final)
if (n_maxi==0){
casos[5]<-25
casos[6]<-25
}
else{
if (n_maxi_inicial==0 & n_maxi_final!=0){
distancia=n_maxi_final
if (distancia>=dato_an){
casos[1]=35
casos[8]=15
}
else if(distancia<dato_an & distancia>=dato_an2){
casos[2]=35
casos[8]=15
}
else{
casos[7]=50
}
}
else if(n_maxi_inicial!=0 & n_maxi_final==0){
distancia=n_maxi_inicial
if (distancia>=dato_an){
casos[1]=15
casos[2]=15
casos[3]=20
}
else if(distancia<dato_an & distancia>=dato_an2){
casos[3]=50
}
else if (distancia>mean(a$tama) & distancia<dato_an2){
casos[3]=15
casos[4]=35
}
else{
casos[4]=50
}
}
else{
distancia=n_maxi
if (n_maxi_final>=n_maxi_inicial){
if (distancia>=dato_an){
casos[1]=35
casos[8]=15
}
else if(distancia<dato_an & distancia>=dato_an2){
casos[1]=15
casos[2]=35
}
else if (distancia>mean(a$tama) & distancia<dato_an2){
casos[1]=10
casos[2]=40
}
}
else{
if (distancia>=dato_an){
casos[8]=20
casos[1]=30
}
else if(distancia<dato_an & distancia>=dato_an2){
casos[1]=15
casos[2]=35
}
else if (distancia>mean(a$tama) & distancia<dato_an2){
casos[1]=10
casos[2]=25
casos[3]=15
}
}
}
}
return(casos)
}
clasificacion_reversion<-function(tabla,fecha_inicio,fecha_final){
media_reversion=mean(tabla$REVERSION)
tabla_temp=tabla %>% filter(DATES>=fecha_inicio & DATES<=fecha_final)
numero_filas=nrow(tabla_temp)
media_reversion_temp=mean(tabla_temp$REVERSION)
positivos=tabla_temp %>% filter(SCALE>=0)
negativos=tabla_temp %>% filter(SCALE<0)
casos=vector(,8)
# # Ao inicial
# year_1=as.numeric(format(as.Date(fecha_inicio),'%Y'))
# # Ao final
# year_2=as.numeric(format(as.Date(fecha_final),'%Y'))
# Ao mitad
year_m=as.Date((as.numeric(as.Date(fecha_final))+as.numeric(as.Date(fecha_inicio)))/2)
# Crear una nueva variable que solo tenga el ao de los dias
#tabla_temp=tabla_temp %>% mutate("YEAR"=as.numeric(format(DATES,'%Y')))
# Filtro por fecha inicial
tabla_inicial=tabla_temp %>% filter(DATES<year_m)
#Filtro por fecha final
tabla_final=tabla_temp %>% filter(DATES>=year_m)
# Positivos y negativos de cada de las tablas
# positivos_inicial=tabla_inicial %>% filter(SCALE>=0)
#
# negativos_inicial=tabla_inicial %>% filter(SCALE<0)
#
# positivos_final=tabla_final %>% filter(SCALE>=0)
#
# negativos_final=tabla_final %>% filter(SCALE<0)
# regresion de los dos aos
if (tabla$DATES[1]>fecha_inicio){
w=lm(tabla$SCALE~tabla$DATES)
w1=lm(tabla$SCALE~tabla$DATES)
w2=lm(tabla$SCALE~tabla$DATES)
}
else{
w=lm(tabla_temp$SCALE~tabla_temp$DATES,tabla_temp)
# regresion primer ao
w1=lm(tabla_inicial$SCALE~tabla_inicial$DATES,tabla_temp)
# regresion segundo ao
w2=lm(tabla_final$SCALE~tabla_final$DATES,tabla_temp)
}
# todos los datos de la tabla son positivos?
if (nrow(positivos)==nrow(tabla_temp)){
# tabla_media=tabla_temp %>% mutate("MINORS"=ifelse(REVERSION<=media_reversion,1,0))
# ceros_tabla_media=tabla_media %>% filter(MINORS==1)
if(w$coefficients[2]<0.001 & w$coefficients[2]>(-0.001)){
casos[1]=50+casos[1]
}
else if (w1$coefficients[2]<(-0.001) & w2$coefficients[2]<(-0.001)){
casos[2]=50+casos[2]
}
else if (w1$coefficients[2]>(0.001) & w2$coefficients[2]>(0.001)){
casos[8]=50+casos[8]
}
else if (w1$coefficients[2]>(0.001) & w2$coefficients[2]<(-0.001)){
casos[2]=40+casos[2]
casos[1]=10+casos[1]
}
else if(w1$coefficients[2]<(-0.001) & w2$coefficients[2]>(0.001)){
casos[8]=40+casos[8]
casos[1]=10+casos[1]
}
}
else if(nrow(positivos)==0){
# tabla_media=tabla_temp %>% mutate("MAYORES"=ifelse(REVERSION>=media_reversion,1,0))
# ceros_tabla_media=tabla_media %>% filter(MAYORES==1)
if (w$coefficients[2]<0.001 & w$coefficients[2]>(-0.001)){
casos[5]=40+casos[5]
casos[6]=10+casos[6]
}
else if (w1$coefficients[2]<0 & w2$coefficients[2]<0){
casos[4]=10+casos[4]
casos[5]=40+casos[5]
}
else if (w1$coefficients[2]>0 & w2$coefficients[2]>0){
casos[7]=50+casos[7]
}
else if (w1$coefficients[2]>0 & w2$coefficients[2]<0){
casos[5]=50+casos[5]
}
else if(w1$coefficients[2]<0 & w2$coefficients[2]>0){
casos[6]=30+casos[6]
casos[5]=20+casos[5]
}
}
else{
if (w1$coefficients[2]<0 & w2$coefficients[2]<0){
casos[3]=35+casos[3]
casos[4]=15+casos[4]
}
else if (w1$coefficients[2]>0 & w2$coefficients[2]>0){
casos[7]=35+casos[7]
casos[8]=15+casos[8]
}
else if (w1$coefficients[2]>0 & w2$coefficients[2]<0){
casos[3]=40+casos[3]
casos[7]=10+casos[7]
}
else if(w1$coefficients[2]<0 & w2$coefficients[2]>0){
casos[3]=10+casos[3]
casos[7]=40+casos[7]
}
}
return(casos)
}
clasificacion_kafka<-function(tabla,tabla_maximos,fecha_inicio,fecha_final){
primera_parte=clasificacion_maximos(tabla,tabla_maximos,fecha_inicio,fecha_final)
segunda_parte=clasificacion_reversion(tabla,fecha_inicio,fecha_final)
final=primera_parte+segunda_parte
return(final)
}
crear_tabla_resumen<-function(lista,nombres){
total=lista[[1]]
if (length(lista)>1){
for (i in 2:length(lista)){
total=cbind(total,lista[[i]])
}
}
total=as.data.frame(total)
colnames(total)<-nombres
return(total)
}
warning_tabla<-function(tabla){
nombres=colnames(tabla)
war=vector(,nrow(tabla))
for (i in 1:nrow(tabla)){
if (tabla$estados[i]!="icarus" & tabla$icarus[i]>30){
war[i]<-"Icarus has a significant percentage into the algorithm, be careful"
}
else if(tabla$estados[i]!="zombie" & tabla$zombie[i]>30){
war[i]<-"Zombie has a significant percentage into the algorithm, be careful"
}
else{
war[i]<-"-"
}
}
tabla_final=cbind(tabla,war)
tabla_final=as.data.frame(tabla_final)
colnames(tabla_final)=c(nombres,"warnings")
return(tabla_final)
}
lista_accion<-normal_indicador(tablas_original)
pru=prueba_maximos(tablas_original)
### tablas reversion a la media ###
listas_tab<-lista_tabla_tab(lista_accion)
### Ejecucion kafka ###
lista_resultados=list()
for (i in 1:length(tablas_original)){
print(i)
b=clasificacion_kafka(listas_tab[[i]],pru[[i]],"2018-05-25","2020-05-25")
lista_resultados[[i]]<-b
}
final=crear_tabla_resumen(lista_resultados,vec)
View(listas_tab[[1]])
library(tidyverse)
lista_resultados=list()
for (i in 1:length(tablas_original)){
print(i)
b=clasificacion_kafka(listas_tab[[i]],pru[[i]],"2018-05-25","2020-05-25")
lista_resultados[[i]]<-b
}
View(pru[[1]])
filter(pru[[1]],DATES>"2000-01-01")
filter(pru[[2]],DATES>"2000-01-01")
filter(pru[[2]],pru[[2]]DATES>"2000-01-01")
filter(pru[[2]],pru[[2]]$DATES>"2000-01-01")
class(pru[[2]])
library(plyr)
filter(pru[[2]],pru[[2]]$DATES>"2000-01-01")
filter(pru[[2]],DATES>"2000-01-01")
library(dplyr)
filter(pru[[2]],DATES>"2000-01-01")
library(fitdistrplus)
library(shiny)
library(shinydashboard)
library(timeSeries)
library(PerformanceAnalytics)
library(FRAPO)
library(fPortfolio)
library(quantmod)
library(tidyverse)
library(dplyr)
library(fredr)
library(xlsx)
library(plotly)
library(readxl)
library(writexl)
require(reshape2)
library(e1071)
library(poweRlaw)
library(data.table)
library(tseries)
library(mltools)
library(gganimate)
library(cluster)
library(factoextra)
library(NbClust)
library(crosstalk)
library(DT)
library(plyr)
library(dplyr)
library(fredr)
filter(pru[[2]],DATES>"2000-01-01")
